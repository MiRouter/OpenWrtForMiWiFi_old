#
# Copyright (c) 2019-2020 P3TERX <https://p3terx.com>
#
# This is free software, licensed under the MIT License.
# See /LICENSE for more information.
#
# https://github.com/P3TERX/Actions-OpenWrt
# Description: Build OpenWrt using GitHub Actions
#

name: Build OpenWrt

on:
  repository_dispatch:
  workflow_dispatch:
    inputs:
      ssh:
        description: 'SSH connection to Actions'
        required: false
        default: 'false'
#  schedule:
#    - cron: 0 8 * * 5


env:
  TZ: Asia/Shanghai

jobs:
  build:
    runs-on: ubuntu-18.04   

    name: Build ${{matrix.target}}
    strategy:
      fail-fast: false
      matrix:
        target: [xiaomi]
        
    steps:
    - name: Checkout
      uses: actions/checkout@main

    - name: Load Settings.ini
      run: |
        source "${GITHUB_WORKSPACE}/config/${{matrix.target}}/settings.ini"
        echo "REPO_URL=${REPO_URL}" >> $GITHUB_ENV
        echo "REPO_BRANCH=${REPO_BRANCH}" >> $GITHUB_ENV
        echo "FEEDS_CONF=${FEEDS_CONF}" >> $GITHUB_ENV
        echo "COMMON_DIR=${COMMON_DIR}" >> $GITHUB_ENV
        echo "FIRMWARE_TAG=${FIRMWARE_TAG}" >> $GITHUB_ENV
        echo "DIY_P1_SH=${DIY_P1_SH}" >> $GITHUB_ENV
        echo "DIY_P2_SH=${DIY_P2_SH}" >> $GITHUB_ENV
        echo "UPLOAD_BIN_DIR=${UPLOAD_BIN_DIR}" >> $GITHUB_ENV
        echo "UPLOAD_PACKAGES_DIR=${UPLOAD_PACKAGES_DIR}" >> $GITHUB_ENV
        echo "UPLOAD_FIRMWARE=${UPLOAD_FIRMWARE}" >> $GITHUB_ENV
        echo "UPLOAD_COWTRANSFER=${UPLOAD_COWTRANSFER}" >> $GITHUB_ENV
        echo "UPLOAD_WETRANSFER=${UPLOAD_WETRANSFER}" >> $GITHUB_ENV
        echo "UPLOAD_RELEASE=${UPLOAD_RELEASE}" >> $GITHUB_ENV
        echo "UPLOAD_BIN_TO_GITHUB=${UPLOAD_BIN_TO_GITHUB}" >> $GITHUB_ENV

    - name: Initialization environment
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo rm -rf /etc/apt/sources.list.d/* /usr/share/dotnet /usr/local/lib/android /opt/ghc
        sudo -E apt-get -qq update
        sudo -E apt-get -qq install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib g++-multilib p7zip p7zip-full msmtp libssl-dev texinfo libreadline-dev libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint ccache curl wget vim nano python python3 python-pip python3-pip python-ply python3-ply haveged lrzsz device-tree-compiler scons antlr3 gperf intltool rsync
        sudo -E apt-get -qq autoremove --purge
        sudo -E apt-get -qq clean
        sudo timedatectl set-timezone "$TZ"
        sudo mkdir -p /workdir
        sudo chown $USER:$GROUPS /workdir

    - name: Clone source code
      working-directory: /workdir
      run: |
        df -hT $PWD
        git clone $REPO_URL -b $REPO_BRANCH openwrt
        ln -sf /workdir/openwrt $GITHUB_WORKSPACE/openwrt

    - name: Load custom feeds
      run: |
        [ -e common-all/$FEEDS_CONF ] && cp common-all/$FEEDS_CONF openwrt/feeds.conf.default
        [ -e $COMMON_DIR/$FEEDS_CONF ] && cp $COMMON_DIR/$FEEDS_CONF openwrt/feeds.conf.default
        [ -e config/${{matrix.target}}/$FEEDS_CONF ] && cp config/${{matrix.target}}/$FEEDS_CONF openwrt/feeds.conf.default
        if [ -f "common-all/$DIY_P1_SH" ]; then
        (
          chmod +x common-all/$DIY_P1_SH
          cd openwrt
          $GITHUB_WORKSPACE/common-all/$DIY_P1_SH
          cd -
        )
        fi
        if [ -f "$COMMON_DIR/$DIY_P1_SH" ]; then
        (
          chmod +x $COMMON_DIR/$DIY_P1_SH
          cd openwrt
          $GITHUB_WORKSPACE/$COMMON_DIR/$DIY_P1_SH
          cd -
        )
        fi
        if [ -f "config/${{matrix.target}}/$DIY_P1_SH" ]; then
        (
          chmod +x config/${{matrix.target}}/$DIY_P1_SH
          cd openwrt
          $GITHUB_WORKSPACE/config/${{matrix.target}}/$DIY_P1_SH
          cd -
        )
        fi


    - name: Update feeds
      run: cd openwrt && ./scripts/feeds update -a

    - name: Install feeds
      run: cd openwrt && ./scripts/feeds install -a

    - name: Load custom configuration
      run: |
        [ -e common-all/files ] && cp -rf common-all/files openwrt/files
        [ -e common-all/diy ] && cp -Rf common-all/diy/* openwrt
        [ -e $COMMON_DIR/files ] && cp -rf $COMMON_DIR/files openwrt/files
        [ -e $COMMON_DIR/diy ] && cp -Rf $COMMON_DIR/diy/* openwrt
        [ -e config/${{matrix.target}}/files ] && cp -rf config/${{matrix.target}}/files openwrt/files
        [ -e config/${{matrix.target}}/diy ] && cp -rf config/${{matrix.target}}/diy/* openwrt
        [ -e config/${{matrix.target}}/.config ] && cp config/${{matrix.target}}/.config openwrt/.config
        if [ -f "common-all/$DIY_P2_SH" ]; then
        (
          chmod +x common-all/$DIY_P2_SH
          cd openwrt
          $GITHUB_WORKSPACE/common-all/$DIY_P2_SH
          cd -
        )
        fi
        if [ -f "$COMMON_DIR/$DIY_P2_SH" ]; then
        (
          chmod +x $COMMON_DIR/$DIY_P2_SH
          cd openwrt
          $GITHUB_WORKSPACE/$COMMON_DIR/$DIY_P2_SH
          cd -
        )
        fi
        if [ -f "config/${{matrix.target}}/$DIY_P2_SH" ]; then
        (
          chmod +x config/${{matrix.target}}/$DIY_P2_SH
          cd openwrt
          $GITHUB_WORKSPACE/config/${{matrix.target}}/$DIY_P2_SH
          cd -
        )
        fi

    - name: SSH connection to Actions
      uses: P3TERX/ssh2actions@main
      if: (github.event.inputs.ssh == 'true' && github.event.inputs.ssh  != 'false') || contains(github.event.action, 'ssh')
      env:
        TELEGRAM_CHAT_ID: ${{ secrets.TELEGRAM_CHAT_ID }}
        TELEGRAM_BOT_TOKEN: ${{ secrets.TELEGRAM_BOT_TOKEN }}


    - name: Download package
      id: package
      run: |
        cd openwrt
        make defconfig
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;

    - name: Compile the firmware
      id: compile
      run: |
        cd openwrt
        echo -e "$(nproc) thread compile"
        make -j$(nproc) || make -j1 || make -j1 V=s
        echo "::set-output name=status::success"
        echo "FILE_DATE=_$(date +"%Y%m%d%H%M")" >> $GITHUB_ENV

    - name: Check space usage
      if: (!cancelled())
      run: df -hT

    - name: Upload bin directory
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == 'true'
      with:
        name: OpenWrt_bin_${{ env.FIRMWARE_TAG }}${{ env.FILE_DATE }}
        path: openwrt/bin
        
    - name: Upload packages directory
      uses: actions/upload-artifact@main
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_PACKAGES_DIR == 'true'
      with:
        name: OpenWrt_packages${{ env.FILE_DATE }}
        path: openwrt/bin/packages
        
    - name: Upload bin directory to GitHub
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_TO_GITHUB == 'true'
      env: 
        GITHUB_TOKEN: ${{ secrets.TOKEN }}
      run: |
        git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
        git config --global user.name "github-actions[bot]"
        git clone -b bin https://github.com/MiRouter/OpenWrtForMiWiFi.git uploadfiles
        cd $GITHUB_WORKSPACE/uploadfiles/bin
        rm -Rf *
        git rm --cache *
        cp -rf $GITHUB_WORKSPACE/openwrt/bin/* $GITHUB_WORKSPACE/uploadfiles/bin
        cd ..
        git add .
        git commit -m "update$(TZ='Asia/Shanghai' date +@%Y%m%d)"
        git push --quiet "https://${{ secrets.TOKEN }}@github.com/MiRouter/OpenWrtForMiWiFi" HEAD:bin

    - name: Organize files
      id: organize
      if: env.UPLOAD_FIRMWARE == 'true' && !cancelled()
      run: |
        cd openwrt/bin/targets
        rm -rf ./*/*/packages
        echo "FIRMWARE=$PWD" >> $GITHUB_ENV
        echo "::set-output name=status::success"

    - name: Upload firmware directory
      uses: actions/upload-artifact@main
      if: steps.organize.outputs.status == 'success' && !cancelled()
      with:
        name: OpenWrt_firmware_${{ env.FIRMWARE_TAG }}${{ env.FILE_DATE }}
        path: ${{ env.FIRMWARE }}

    - name: Upload firmware to cowtransfer
      id: cowtransfer
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_COWTRANSFER == 'true' && !cancelled()
      run: |
        curl -fsSL git.io/file-transfer | sh
        ./transfer cow --block 2621440 -s -p 64 --no-progress ${FIRMWARE} 2>&1 | tee cowtransfer.log
        echo "::warning file=cowtransfer.com::$(cat cowtransfer.log | grep https)"
        echo "::set-output name=url::$(cat cowtransfer.log | grep https | cut -f3 -d" ")"

    - name: Upload firmware to WeTransfer
      id: wetransfer
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_WETRANSFER == 'true' && !cancelled()
      run: |
        curl -fsSL git.io/file-transfer | sh
        ./transfer wet -s -p 16 --no-progress ${FIRMWARE} 2>&1 | tee wetransfer.log
        echo "::warning file=wetransfer.com::$(cat wetransfer.log | grep https)"
        echo "::set-output name=url::$(cat wetransfer.log | grep https | cut -f3 -d" ")"

    - name: Generate release tag
      id: tag
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_RELEASE == 'true' && !cancelled()
      run: |
        echo "::set-output name=release_tag::$(date +"%Y.%m.%d-%H%M")"
        touch release.txt
        [ $UPLOAD_COWTRANSFER = true ] && echo "ðŸ”— [Cowtransfer](${{ steps.cowtransfer.outputs.url }})" >> release.txt
        [ $UPLOAD_WETRANSFER = true ] && echo "ðŸ”— [WeTransfer](${{ steps.wetransfer.outputs.url }})" >> release.txt
        echo "::set-output name=status::success"

    - name: Upload firmware to release
      uses: softprops/action-gh-release@v1
      if: steps.tag.outputs.status == 'success' && !cancelled()
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ steps.tag.outputs.release_tag }}
        body_path: release.txt
        files: ${{ env.FIRMWARE }}/*

    - name: Delete workflow runs
      uses: GitRML/delete-workflow-runs@main
      with:
        retain_days: 1
        keep_minimum_runs: 3

    - name: Remove old Releases
      uses: dev-drprasad/delete-older-releases@v0.1.0
      if: env.UPLOAD_RELEASE == 'true' && !cancelled()
      with:
        keep_latest: 3
        delete_tags: true
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
